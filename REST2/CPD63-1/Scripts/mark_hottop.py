# -*- coding: utf-8 -*-"""Mandatory inputs:     - Path to processed topology file ('processed.top')    - Path to json file containing "hot" residues ('test.json')Optional inputs:"""### import modulesimport osimport sysimport pandas as pd### get processed topology file & molecules to update# l_inputs = ['mark_hottop.py', '-p', 'processed.top', '-i', 'Setup/test.json']l_inputs = sys.argv### parse user inputsf_topol = l_inputs[l_inputs.index('-p') + 1]f_json = os.path.abspath(l_inputs[l_inputs.index('-i') + 1])### load JSON file containing "hot" residues as decided by userdf_hot = pd.read_json(f_json)dict_hotmol = {}for col in df_hot.columns:    dict_hotmol[col] = df_hot[col].dropna().tolist()[0]### open processed topology filewith open(f_topol, 'r') as topol:    l_topol = topol.read().strip().split('\n')    ### get indicies for insertionsidx = 0 l_idx = []for line in l_topol:### use `moleculetype` as demarcation    if '[ moleculetype ]' in line:        idx_mol = idx + 2### check if molecule should be designated as "hot"        mol = l_topol[idx_mol].split()[0].strip()#         if mol in l_hotmol:        if mol in dict_hotmol.keys():            l_idx.append(idx_mol)### move index forward    idx += 1### assign hot atomsfor idx_hotmol in l_idx:    print(f'\nAssigning "hot" atoms to {l_topol[idx_hotmol].split()[0]}... ')### loop through atoms in molecule    idx = idx_hotmol + 4    for entry in l_topol[idx:]:### use "new line" as a way to break out of loop... should be present at the end of each molecule        if len(entry.split()) == 0:            break### check if residue is defined as hot                elif '; residue' in entry:            res = int(entry.split()[2])            if res in dict_hotmol[l_topol[idx_hotmol].split()[0]]:                flag_hotmol = 1            else:                flag_hotmol = 0### insert updated atomtype into topology            l_topol.insert(idx, entry)            del(l_topol[idx+1])### move to next entry                        idx += 1### otherwise update atomtype only if residue specified by user        else:            if flag_hotmol == 1:                atomtype = entry.split()[1]                newline = entry.replace(atomtype, f'{atomtype}_', 1)                print(res, newline)            else:                newline = entry### insert updated atomtype into topology            l_topol.insert(idx, newline)            del(l_topol[idx+1])### move to next entry                        idx += 1### write to new topology fileos.system(f'mv {f_topol} {f_topol.split(".")[0]}_old.top')with open(f_topol, 'w') as newtopol:    for line in l_topol:        newtopol.write(f'{line}\n')