# -*- coding: utf-8 -*-"""Mandatory inputs:     - Path to processed topology file ('processed.top')Optional inputs:"""### import modulesimport osimport sys### get processed topology file & molecules to update# f_topol = 'processed.top'# l_inputs = ['fix_processed.py', 'processed.top', 'Protein_chain_A', '9YA', 'NAI']### get protein & ligand(s) structure filesf_topol = sys.argv[1]l_inputs = sys.argv### open processed topology filewith open(f_topol, 'r') as topol:    l_topol = topol.read().strip().split('\n')### get user-defined "hot" moleculesl_hotmol = l_inputs[2:]    ### get indicies for insertionsidx = 0 l_idx = []for line in l_topol:### use `moleculetype` as indicator    if '[ moleculetype ]' in line:        idx_mol = idx + 2### check if molecule should be designated as "hot"        mol = l_topol[idx_mol].split()[0].strip()        if mol in l_hotmol:            l_idx.append(idx_mol)### move index forward    idx += 1### assign hot atomsfor idx_hotmol in l_idx:    print(f'Assigning "hot" atoms to {l_topol[idx_hotmol].split()[0]}... ')### loop through atoms in molecule    idx = idx_hotmol + 5    for entry in l_topol[idx:]:### use "new line" as a way to break out of loop... should be present at the end of each molecule        if len(entry.split()) == 0:            break### otherwise update atomtype        else:            atomtype = entry.split()[1]            newline = entry.replace(atomtype, f'{atomtype}_', 1)#             print(idx, newline)### insert updated atomtype into topology            l_topol.insert(idx, newline)            del(l_topol[idx+1])### move to next entry                        idx += 1### write to new topology fileos.system(f'mv {f_topol} {f_topol.split(".")[0]}_old.top')with open(f_topol, 'w') as newtopol:    for line in l_topol:        newtopol.write(f'{line}\n')